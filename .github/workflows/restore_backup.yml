name: Restore Backup to Prod

on:
  workflow_dispatch:
    inputs:
      backup_file:
        description: "Enter the exact backup filename (e.g., backup_20251005_1530.json)"
        required: true
        default: ""
      confirm_restore:
        description: "Type YES to confirm you want to overwrite the production DB"
        required: true
        default: "NO"

jobs:
  restore-backup:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_BUCKET_BACKUP: ${{ vars.AWS_BUCKET_BACKUP }}
      REMOTE_HOST: "ec2-18-142-37-231.ap-southeast-1.compute.amazonaws.com"
      ALLOWED_MODELS="bjj.Video bjj.Tag bjj.Position bjj.Technique bjj.Guard"

    steps:
      - name: Confirm Restore
        run: |
          if [ "${{ github.event.inputs.confirm_restore }}" != "YES" ]; then
            echo "‚ùå Confirmation missing. To proceed, set confirm_restore=YES."
            exit 1
          fi
          echo "‚úÖ Confirmation received."

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install boto3==1.38.37 botocore==1.38.37 s3transfer==0.13.1
          pip install -r requirements.txt
          pip install awscli jq

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Add SSH key to known_hosts
        run: ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

      - name: Download selected backup from S3
        run: |
          BACKUP_FILE="${{ github.event.inputs.backup_file }}"
          echo "Fetching backup file: $BACKUP_FILE"
          aws s3 cp "s3://${AWS_BUCKET_BACKUP}/${BACKUP_FILE}" ./ || exit 1
          echo "‚úÖ Backup downloaded successfully."

      - name: Validate Backup Contents
        run: |
          echo "üîç Validating that backup contains only allowed app models..."
          MODELS_IN_FILE=$(jq -r '.[].model' "$BACKUP_FILE" | sort -u)
          for m in $MODELS_IN_FILE; do
            if ! [[ " $ALLOWED_MODELS " =~ " $m " ]]; then
              echo "‚ùå Backup contains disallowed model: $m"
              exit 1
            fi
          done
          echo "‚úÖ Backup validation passed. Only allowed models present."

      - name: Restore data to Production
        run: |
          chmod +x scripts/sync_data.sh
          echo "üöÄ Restoring backup to production..."
          ./scripts/sync_data.sh --rollback "${{ github.event.inputs.backup_file }}"
          echo "‚úÖ Restore completed successfully."

