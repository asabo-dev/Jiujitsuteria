name: Restore BJJ App Backup (Prod)

on:
  workflow_dispatch:
    inputs:
      backup_file:
        description: "Enter the S3 backup filename (e.g. backup_2025-10-06.json) or 'latest'"
        required: true
        default: "latest"
      confirm_restore:
        description: "Type YES to confirm actual restore or DRY-RUN to simulate"
        required: true
        default: "DRY-RUN"

jobs:
  restore-backup:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_BUCKET_BACKUP: ${{ vars.AWS_BUCKET_BACKUP }}
      REMOTE_HOST: ec2-18-142-37-231.ap-southeast-1.compute.amazonaws.com
      REMOTE_USER: deploy
      PROD_PATH: /home/deploy/bjj_app/current
      SHARED_PATH: /home/deploy/bjj_app/shared
      VENV_PATH: /home/deploy/bjj_app/shared/venv
      DJANGO_SETTINGS: jiujitsuteria.settings.prod
      MODELS: "bjj.Video bjj.Tag bjj.Position bjj.Technique bjj.Guard"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI (for aws s3 commands)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          python3 -m pip install --upgrade pip
          pip install "boto3==1.38.37" "botocore>=1.38.37,<1.39.0" "s3transfer>=0.13.0,<0.14.0"
          pip install -r requirements.txt
          pip install awscli

      - name: Confirm Restore or Dry-Run
        run: |
          CONFIRM="${{ github.event.inputs.confirm_restore }}"
          if [ "$CONFIRM" != "YES" ] && [ "$CONFIRM" != "DRY-RUN" ]; then
            echo "‚ùå Invalid confirmation. Type YES to restore or DRY-RUN to simulate."
            exit 1
          fi
          echo "‚úÖ Mode confirmed: $CONFIRM"
          echo "MODE=$CONFIRM" >> $GITHUB_ENV

      - name: Add SSH host key to known_hosts
        run: ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

      - name: Resolve selected backup (or pick latest)
        id: resolve_backup
        run: |
          INPUT="${{ github.event.inputs.backup_file }}"
          if [ "$INPUT" = "latest" ] || [ -z "$INPUT" ]; then
            echo "Fetching latest backup from S3..."
            LATEST=$(aws s3 ls "s3://${AWS_BUCKET_BACKUP}/" | sort | tail -n 1 | awk '{print $4}')
            if [ -z "$LATEST" ]; then
              echo "‚ùå No backups found in S3 at s3://${AWS_BUCKET_BACKUP}/"
              exit 1
            fi
            BACKUP_FILE="$LATEST"
          else
            BACKUP_FILE="$INPUT"
          fi
          echo "Backup to restore: $BACKUP_FILE"
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Download backup from S3
        run: |
          echo "Downloading s3://${AWS_BUCKET_BACKUP}/${BACKUP_FILE} ..."
          aws s3 cp "s3://${AWS_BUCKET_BACKUP}/${BACKUP_FILE}" ./restore.json || { echo "‚ùå Failed to download backup"; exit 1; }
          echo "‚úÖ Backup downloaded."

      - name: Validate backup JSON only contains allowed app models
        run: |
          echo "üîç Validating JSON contents..."
          MODELS_IN_FILE=$(jq -r '.[].model' restore.json | sort -u)
          echo "Models found in backup: $MODELS_IN_FILE"
          for m in $MODELS_IN_FILE; do
            if [[ ! " ${MODELS} " =~ " ${m} " ]]; then
              echo "‚ùå Disallowed model detected in backup: $m"
              exit 1
            fi
          done
          echo "‚úÖ Backup validation passed."

      - name: Transfer backup JSON to EC2
        if: env.MODE == 'YES' || env.MODE == 'DRY-RUN'
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          scp -i key.pem -o StrictHostKeyChecking=no ./restore.json ${REMOTE_USER}@${REMOTE_HOST}:${SHARED_PATH}/restore.json
          echo "‚úÖ Backup transferred to ${REMOTE_HOST}:${SHARED_PATH}/restore.json"

      - name: Restore on EC2 (loaddata)
        if: env.MODE == 'YES'
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} bash -l -c "
            set -euo pipefail
            echo 'üîÑ Activating virtualenv and restoring...'
            source ${VENV_PATH}/bin/activate || { echo '‚ö†Ô∏è venv not found at ${VENV_PATH}'; exit 1; }
            cd ${PROD_PATH}
            python3 manage.py loaddata ${SHARED_PATH}/restore.json --settings=${DJANGO_SETTINGS}
            echo '‚úÖ loaddata finished on remote'
          "
          echo "‚úÖ Remote restore command completed."

      - name: Restart Gunicorn and Nginx (only in YES mode)
        if: env.MODE == 'YES'
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          echo "‚ôªÔ∏è Restarting Gunicorn and Nginx on EC2..."
          ssh -i key.pem -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} bash -l -c "
            set -e
            sudo systemctl restart gunicorn || { echo '‚ö†Ô∏è Gunicorn restart failed'; exit 1; }
            sudo systemctl reload nginx || { echo '‚ö†Ô∏è Nginx reload failed'; exit 1; }
            echo '‚úÖ Services restarted successfully.'
          "

      - name: Cleanup local files / key
        if: always()
        run: |
          rm -f key.pem restore.json || true
          echo "üßπ Cleanup complete."

      - name: Restore Complete
        if: always()
        run: |
          echo "‚úÖ Backup restore job finished successfully (mode: ${{ env.MODE }}, file: ${{ env.BACKUP_FILE }})"

